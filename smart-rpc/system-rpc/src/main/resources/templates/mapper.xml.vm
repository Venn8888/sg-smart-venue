#set($lowerEntity=$entity.substring(0,1).toLowerCase() + $entity.substring(1))
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${package.Mapper}.${table.mapperName}">

#if(${enableCache})
	<!-- 开启二级缓存 -->
	<cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>

#end
#if(${baseResultMap})
	<!-- 通用查询映射结果 -->
	<resultMap id="BaseResultMap" type="${package.Entity}.${entity}">
#foreach($field in ${table.fields})
#if(${field.keyFlag})##生成主键排在第一位
		<id column="${field.name}" property="${field.propertyName}" />
#end
#end
#foreach($field in ${table.commonFields})##生成公共字段
	<result column="${field.name}" property="${field.propertyName}" />
#end
#foreach($field in ${table.fields})
#if(!${field.keyFlag})##生成普通字段
		<result column="${field.name}" property="${field.propertyName}" />
#end
#end
	</resultMap>

#end
##if(${baseColumnList})
    <!-- 通用查询结果列 -->
    <sql id="${entity}QuerySql">
        ${table.fieldNames}
    </sql>

	<select id="selectListAll" parameterType="${package.Entity}.${entity}" resultMap="BaseResultMap">
		select
		<include refid="${entity}QuerySql"/>
		from ${table.name}
		where 1=1
		#foreach($field in ${table.fields})
			<if test="$field.propertyName != null #if($field.columnType.type == 'String' ) and $field.propertyName.trim() != ''#end"> and $field.name=#{${field.propertyName}}</if>
		#end
	</select>

	<select id="selectById" parameterType="int" resultMap="BaseResultMap">
		select
		<include refid="${entity}QuerySql"/>
		from ${table.name}
		#foreach($field in ${table.fields})
		#if(${field.keyFlag})
		where $field.name=#{${field.propertyName}}
		#end
		#end
	</select>

	<insert id="insert" parameterType="${package.Entity}.${entity}">
		insert into ${table.name}
		<trim prefix="(" suffix=")" suffixOverrides=",">
			#foreach($field in ${table.fields})
				<if test="$field.propertyName != null #if($field.columnType.type == 'String' ) and $field.propertyName != ''#end">`$field.name`,</if>
			#end
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			#foreach($field in ${table.fields})
				<if test="$field.propertyName != null #if($field.columnType.type == 'String' ) and $field.propertyName != ''#end">#{${field.propertyName}},</if>
			#end
		</trim>
	</insert>

	<update id="updateById" parameterType="${package.Entity}.${entity}">
		update  ${table.name}
		<trim prefix="SET" suffixOverrides=",">
			#foreach($field in ${table.fields})
				<if test="$field.propertyName != null #if($field.columnType.type == 'String' ) and $field.propertyName != ''#end">`$field.name`=#{${field.propertyName}},</if>
			#end
		</trim>
		#foreach($field in ${table.fields})
		#if(${field.keyFlag})
		where $field.name=#{${field.propertyName}}
		#end
		#end
	</update>

##	<insert id="save" parameterType="${package.Entity}.${entity}">
##		insert into ${table.name}
##		<trim prefix="(" suffix=")" suffixOverrides=",">
##			#foreach($field in ${table.fields})
##				<if test="$field.propertyName != null #if($field.columnType.type == 'String' ) and $field.propertyName != ''#end">`$field.name`,</if>
##			#end
##		</trim>
##		<trim prefix="values (" suffix=")" suffixOverrides=",">
##			#foreach($field in ${table.fields})
##				<if test="$field.propertyName != null #if($field.columnType.type == 'String' ) and $field.propertyName != ''#end">#{${field.propertyName}},</if>
##			#end
##		</trim>
##		ON DUPLICATE KEY UPDATE
##		#foreach($field in ${table.fields})
##			#if(${field.keyFlag})
##			`$field.name`=values(`$field.name`)
##			#end
##			#if(!${field.keyFlag})
##			<if test="$field.propertyName != null #if($field.columnType.type == 'String' ) and $field.propertyName != ''#end">,`$field.name`=values(`$field.name`)</if>
##			#end
##		#end
##	</insert>

	<delete id="deleteById" parameterType="int">
		delete from ${table.name}
		#foreach($field in ${table.fields})
		#if(${field.keyFlag})
		where `$field.name`=#{${field.propertyName}}
		#end
		#end
	</delete>

	<delete id="deleteByIds" parameterType="String">
		#foreach($field in ${table.fields})
		#if(${field.keyFlag})
		delete from ${table.name} where find_in_set(`$field.name`,#{ids})
		#end
		#end
	</delete>

	<insert id="saveForeach" parameterType="java.util.List" useGeneratedKeys="false">
		insert into ${table.name}
		<trim prefix="(" suffix=")" suffixOverrides=",">
		#foreach($field in ${table.fields})
		`$field.name`,
		#end
		</trim>
		values
		<foreach collection="list" item="item" index="index" separator=",">
		<trim prefix="(" suffix=")" suffixOverrides=",">
		#foreach($field in ${table.fields})
		#{item.${field.propertyName}},
		#end
		</trim>
		</foreach>
	</insert>

##end
</mapper>
